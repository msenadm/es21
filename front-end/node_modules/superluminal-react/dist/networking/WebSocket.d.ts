import { WebSocketMessagePath } from '../models/WebSocketMessagePath';
export declare enum SLWebSocketState {
    Open = 0,
    Closed = 1
}
export interface SLWebSocketEventListener {
    onWebSocketEvent?: (json: JSON) => void;
    onWebSocketStateChanged?: (state: SLWebSocketState) => void;
}
export declare class SLWebSocket extends WebSocket {
    /** Holds messages while the connection is closed. */
    private buffer;
    private pingTimeout;
    private reconnectTimeout;
    private isReconnecting;
    private isCurrent;
    private slURL;
    private slListeners;
    private onReconnect;
    private utf8Encoder;
    slState: SLWebSocketState;
    static instance: SLWebSocket;
    private constructor();
    static initialize(url: string, onReconnect: () => Promise<void>): SLWebSocket;
    private static initializeWithBufferAndListeners;
    addSLListener(listener: SLWebSocketEventListener): void;
    removeSLListener(listener: SLWebSocketEventListener): void;
    private reconnect;
    private onOpen;
    slSend(path: WebSocketMessagePath, token: string, payload: any): void;
    private sendOrBuffer;
    private sendBufferedMessages;
    private onMessage;
    private receive;
    private onError;
    private onClose;
    disconnect(): void;
    private sendPing;
}
