import { TableInfo, TablePage, TableRow } from "../models/TableInfo";
declare class TableData {
    tableID: string;
    numberOfRows: number;
    indexWidth: number;
    columns: TableColumn[];
    totalHeight: number;
    private loadedPages;
    private fetchState;
    onFetchRangeUpdated?: (range: RowRange | null) => void;
    private measureInfo;
    private readonly minRowHeight;
    constructor(tableInfo: TableInfo, measureInfo: MeasureInfo);
    rowSlice(range: {
        minY: number;
        maxY: number;
    }, options?: {
        fetchIfNeeded?: boolean;
    }): RowSlice | null;
    fetchRowsIfNeeded(visibleRange: RowRange): null | undefined;
    private rowRangeToFetch;
    private fetchRows;
    handleFetchedPage(page: TablePage): void;
    getFetchRange(): RowRange | null;
    private insertPage;
    private updateMeasurements;
    private rowIndexAtY;
    private findPage;
    private iterateRows;
    private iteratePages;
}
export type MeasureInfo = {
    fonts: {
        header: string;
        index: string;
        body: string;
    };
    totalCellPadding: {
        x: number;
        y: number;
    };
    lineHeight: number;
    maxColumnWidth: number;
};
export type RowRange = {
    start: number;
    end: number;
};
export type RowSlice = {
    startIndex: number;
    startY: number;
    endY: number;
    rows: (TableRow | null)[];
    rowHeights: number[];
};
export type TableColumn = {
    id: string;
    name: string;
    width: number;
};
export default TableData;
