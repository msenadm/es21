import { ChatMessage } from "../models/ChatMessage";
import { SessionState } from "../models/SessionState";
import { SLWebSocket, SLWebSocketEventListener } from "../networking/WebSocket";
import { TablePage } from "../models/TableInfo";
export interface SessionControllerEventListener {
    onSessionStateUpdated?: (sessionState: SessionState, error: string | null) => void;
    onChatMessagesUpdated?: (chatMessages: ChatMessage[]) => void;
    onTablePageReceived?: (page: TablePage) => void;
}
declare class SessionController implements SLWebSocketEventListener {
    listeners: SessionControllerEventListener[];
    projectID: string;
    sessionState: SessionState;
    error: string | null;
    authToken: string | null;
    chatMessages: ChatMessage[];
    private static instance;
    private constructor();
    static getInstance(): SessionController;
    addListener(listener: SessionControllerEventListener): void;
    removeListener(listener: SessionControllerEventListener): void;
    initialize(): void;
    sendChatMessage(message: string): void;
    getTablePage(tableID: string, offset: number, count: number): void;
    getWebSocket(): SLWebSocket;
    onWebSocketEvent(json: JSON): void;
    onMessageReceived(json: JSON): void;
    onSessionStateUpdated(json: JSON): void;
    onAssistantStateUpdated(json: JSON): void;
    onTablePageReceived(json: any): void;
    addChatMessage(message: ChatMessage): void;
    onReconnectWebSocket(): Promise<void>;
}
export default SessionController;
